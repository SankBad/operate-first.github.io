{"componentChunkName":"component---src-templates-doc-js","path":"/operators/moc-cnv-sandbox/","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"mdx":{"id":"f90b7ea8-9398-5884-b8d0-d78618c54edc","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"MOC CNV Sandbox\"), mdx(\"p\", null, \"Configuration and documentation for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.redhat.com/en/resources/container-native-virtualization\"\n  }), \"CNV\"), \" Sandbox at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://massopen.cloud/\"\n  }), \"Mass Open Cloud\"), \" (MOC).\"), mdx(\"h2\", null, \"Playbooks\"), mdx(\"ul\", {\n    \"className\": \"pf-c-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"playbook-preinstall.yml\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set up provisioning host and generate the install configuration.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"playbook-postinstall.yml\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fetches authentication credentials from the provisioning host and\\nthen uses the OpenShift API to perform post-configuration tasks\\n(installing certificates, configuring SSO, installing CNV, etc).\"))), mdx(\"h2\", null, \"Encryption\"), mdx(\"p\", null, \"Files with credentials and other secrets are encrypted using\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.ansible.com/ansible/latest/user_guide/vault.html\"\n  }), \"ansible-vault\"), \". The vault key itself is included in the repository and\\nis encrypted using GPG to the identities listed in the\\n\", \"[.vault_pgp_keys][]\", \" file.\"), mdx(\"h3\", null, \"Adding a new PGP key\"), mdx(\"ol\", {\n    \"className\": \"pf-c-list\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add the key fingerprint to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".vault_pgp_keys\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We use key fingerprints rather than email addresses to ensure that we\\nare using the correct key (you may have multiple keys with the same\\nemail address in your keychain).\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"scripts/rekey-vault-secret.sh\"), \" script. This will decrypt the\\nvault secret and then re-encrypt it to all the identities in the list.\"))), mdx(\"h3\", null, \"Updating the vault secret\"), mdx(\"p\", null, \"If you want to replace the vault secret (e.g., you think the unencrypted\\nsecret has been compromised):\"), mdx(\"ol\", {\n    \"className\": \"pf-c-list\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run the \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"scripts/rekey-vault-files.sh\"), \" script. This will generate a new\\nrandom key, use \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ansible-vault\"), \" to rekey all vaulted files with the new\\nkey, and then encrypt the key to the identities in \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".vault_pgp_keys\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","description":null}}},"pageContext":{"id":"f90b7ea8-9398-5884-b8d0-d78618c54edc","slug":"README"}},"staticQueryHashes":["117426894","3000541721","3753692419"]}